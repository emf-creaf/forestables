[{"path":"https://emf-creaf.github.io/forestables/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 forestables authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Inventory data ingestion process","text":"vignette documents important processes handling official data sources national forest inventories France, United States, Spain.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"ifn-spain-data-processing","dir":"Articles","previous_headings":"","what":"IFN (SPAIN): data processing","title":"Inventory data ingestion process","text":"National Forest Inventory (IFN) project provides national-level information forests evolution taxonomic ecological perspective. periodicity least ten years, ongoing fifty years. Second National Forest Inventory (IFN2) conducted Forest Inventory Service 1986 1996. consisted permanent forest plots marked using metal rod buried center plot, allowing periodic measurement tree comparison physical characteristics condition. Third cycle National Forest Inventory (IFN3) carried 1997 2007. followed methodology established IFN2, focus continuous monitoring forest plots, introduced changes considering forest ecosystems first time Spain. IFN3 aimed provide insights state evolution forests provincial level 100 indicators. Fourth cycle National Forest Inventory (IFN4) started 2008. IFN4 continues methodology predecessors, incorporates changes innovations. Among main novelties fourth cycle (IFN4) use Forest Map Spain scale 1:25000 (MFE) cartographic base.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"data-acquisition","dir":"Articles","previous_headings":"IFN (SPAIN): data processing","what":"Data acquisition:","title":"Inventory data ingestion process","text":"IFN2 : Field data bases (DBF files): Data organized provinces thematic DBF files similar names provinces. https://www.miteco.gob.es/es/biodiversidad/servicios/banco-datos-naturaleza/informacion-disponible/ifn2_descargas.html IFN 3: Field data bases (Access 2007 *.accdb) Data organized provinces province one access file. Within access files thematic sheets similar names. https://www.miteco.gob.es/es/biodiversidad/servicios/banco-datos-naturaleza/informacion-disponible/ifn3_bbdd_descargas_htm.html IFN4 : Field data bases (Access 2007 *.accdb) Data organized provinces/ Autonomous community internal organization similar IFN3. https://www.miteco.gob.es/es/biodiversidad/temas/inventarios-nacionales/inventario-forestal-nacional/cuarto_inventario.html","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"individual-functions-for-ifn-tables","dir":"Articles","previous_headings":"IFN (SPAIN): data processing","what":"Individual functions for IFN tables","title":"Inventory data ingestion process","text":"Variables harmonized inventories. variables may appear multiple tables: id_unique_code ES_ESTADILLO_ PROVINCIA ES_Estadillo_Provincia Code identify plot","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"ifn-tree-table-processing","dir":"Articles","previous_headings":"IFN (SPAIN): data processing > Individual functions for IFN tables","what":"IFN TREE TABLE PROCESSING","title":"Inventory data ingestion process","text":"Information obtained PCMAYORES table IFN3-4 PIESMA IFN2Tree condition: IFN trees must diameter (DBH) greater 7.5 cm sampled. Quality measured foot ( 6 = dead) (see ifn3 documentation) mean diameters calculated obtain variable dbh (diameter/DBH), converted cm. add new variable called density_factor, corresponding Expansion Factor per hectare unit values different dendrometric parameters measured stem. IFN tree sampling follows variable-radius plot sampling, smaller trees measured smaller radii plot, larger trees measured within larger radii follows.  also add new variable: sp_name , scientific name species corresponds sp_code. final variables provided id_unique_code, province_code, class, subclass, plot, sp_code, sp_name, tree, wood_quality, cubing_form, tree_ifn2, tree_ifn3, tree_ifn4, dbh, height density_factor.","code":"dbh = ((Dn1 + Dn2) / 2) * 0.1, # From mm to cm"},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"ifn-shrub-table-processing","dir":"Articles","previous_headings":"IFN (SPAIN): data processing > Individual functions for IFN tables","what":"IFN SHRUB TABLE PROCESSING","title":"Inventory data ingestion process","text":"Information obtained tables PCMatorral IFN3-4 MATORR IFN2 also add new variable sp_name, scientific name species corresponds sp_code. final variables provided id_unique_code, province_code, class, subclass, plot, sp_name, sp_code, height cover.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"ifn-regen-table-processing","dir":"Articles","previous_headings":"IFN (SPAIN): data processing > Individual functions for IFN tables","what":"IFN REGEN TABLE PROCESSING","title":"Inventory data ingestion process","text":"Information obtained tables PCRegenera IFN 3-4 PIESME IFN2 regeneration data sampled differently IFN3-4 compared IFN2, thus processing also different: IFN2 Original variables : averaged number trees given species diameter 25 mm 5m radius Regena 0 –> n = 0 Regena 1 –> 0<n<5 Regena 2 –> 5<= n<=15 Regena 3 –> n>15 harmonize information separate record different row assumptions made. Additionally, new variables added (dbh, density_factor n). n ( actual density trees/ ha ) calculated product number trees density_factor. records REGENA codes, mid point interval assumed actual number species . Regena 0 = 0 Regena 1 = 2.5 Regena 2 = 10 Regena 3 = 20 IFN3 - 4 Original variables : Depending development category (CatDes), regeneration densities quantified differently IFN. development categories 1, 2, 3, counting trees circular plot 5 m radius classifying density according following scale: development category 4, NumPies contains number individuals species present 5-m radius subplot Hm contains average total height group (cm). Additionally, new variables added assumptions made uniform information: density_factor: Expansion Factor per hectare always 127.3239546 dbh: Diameter breast height cm height: Height, CatDes 1,2 3 cm n: Density individuals per ha calculated product density_factor NumPies 1 Trees height less 30 cm. 0.1 10 2.5 127.3239546 2.5 * 127.3239546 final variables given id_unique_code, province_code, class, subclass, plot, sp_code, sp_name, dbh, height, n density_factor","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"ifn-plot-tables-processing","dir":"Articles","previous_headings":"IFN (SPAIN): data processing > Individual functions for IFN tables","what":"IFN PLOT TABLES PROCESSING","title":"Inventory data ingestion process","text":"Information obtained tables DATEST IFN2 PCDatosMap, PCParcelas IFN3-4 Note coordinates approximate. Firstly, names harmonized. Additionally, two variables added indicate coordinate system (coord_sys) CRS - ESPG code (crs). called crs. also add variable indicating version IFN (version). IFN2 Coordinates corrected letters refer numbers . slope assigned following IFN categories: elevation indicated lower limit range 100 actual altitude found. example, ’s 0 100 meters, ’s indicated 100; ’s 100 200, ’s indicated 100, . Huso (UTM zone) recorded IFN2. Therefore, default value 28 assigned Canary Islands, rest peninsula, default value 30. Similarly, variable coord_sys default values ar set follows: ” WGS84” Canary Islands “ED50” rest peninsula. IFN3-4 slope assigned following IFN categories: aspect (ORIENTA2) : measured field. transformed aspect centesimal degrees sexagesimal degrees multiplying 0.9. Values variables coord_sys huso assigned following technical documents IFN. EPSG code coordinate reference system (crs) obtained . huso missing (IFN3) , assumed value Huso = 30. (corrected near future). Final variables id_unique_plot, country, ca_name_original, province_code, province_name_original, plot, class, subclass, coord_sys, year, version, type, aspect slope.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"ffi-france-data-processing","dir":"Articles","previous_headings":"","what":"FFI (FRANCE): data processing","title":"Inventory data ingestion process","text":"Since 2005, adaptable statistical sampling method used annually across metropolitan territories France. method combines data five yearly campaigns generate precise national regional results. Sampling optimized revisiting points every five years, creating grid system enhances logistical efficiency.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"data-acquisition-1","dir":"Articles","previous_headings":"FFI (FRANCE): data processing","what":"Data acquisition:","title":"Inventory data ingestion process","text":"FFI downloaded official portal: https://inventaire-forestier.ign.fr/dataifn/ Version used development package 2023-10-11 data grouped 7 files (data tables): ARBRE.csv BOIS_MORT.csv COUVERT.csv ECOLOGIE.csv FLORE.csv HABITAT.csv PLACETTE.csv CSV files information every plot year. Additionally, downloaded folder can find important documentation PDF format. espar-cdref13.csv metadonnees.csv IGN_DB_documentation_generale_20xx.doc Version first two files included package note downloaded October 2023.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"individual-functions-for-ffi-tables","dir":"Articles","previous_headings":"FFI (FRANCE): data processing","what":"Individual functions for FFI tables","title":"Inventory data ingestion process","text":"Variables appear multiple tables:","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"ffi-tree-tables-processing","dir":"Articles","previous_headings":"FFI (FRANCE): data processing > Individual functions for FFI tables","what":"FFI TREE TABLES PROCESSING","title":"Inventory data ingestion process","text":"Information obtained table (ARBRE.CSV) general, trees deemed censusable (RECENSABLE) considered inventory, circumference 1.30 m equal greater 23.5 cm (7.5 cm diameter). radius measurement plot varies according diameter trees measured.  2nd visit Case “second visit” points, raw data also provided “second visit” locations. trees plots concerned present raw data files collected first visit. VISIT data present placette.csv file allows know whether point subject first second visit protocol. 2010 2014, forest inventory carried revisit locations seen 5 campaigns previously. revisit solely intended quantify forest harvesting. carried inventory plots containing least one censusable tree first visit. plots, cutting () trees present first visit mainly noted. 2015 campaign, information becoming richer type plot. trees measured first pass remeasured (noted cut dead) new censusable trees present 5 m plot inventoried. 2016 , points visited field first time subject second visit. addition observations measurements made trees, field agents carry new observations land cover use, collect data relating evolution population (planting, cutting, etc.). data collected 2nd visit therefore generally less numerous (especially 2016) taken (ecological data particular). IMPORTANT NOTE: Check metadonnees.csv recapitulatif_metadonnes.csv together specific documentation source file (ARBRE, ECOLOGIE, PLACETTE, COUVERT, FLORE…) understand variable static changed time, also see units (codes ) year . may need check example meaning status (veget) veget5 (revisit), adding changes units. Example:  happens ESPAR. package give default last version correspondence ESPAR, CD_ref LATIN NAME (espar-cdref13.csv) (OCTOBER 2023). based TAXREF V13 (https://inpn.mnhn.fr/telechargement/referentielEspece/taxref/13.0/menu), indicated french documentation, change future. Circumference 130cm height (DBH) plot revisited contain data 2015. transform C13 m dbh cm: Final variables id_unique_plot, plot, dep, year, tree, espar, sp_code, sp_name, status, status5, dbh, height density_factor. Note status5 status 2nd visit (5 year).","code":"dbh = (C13 / pi) * 100"},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"ffi-shrub-tables-processing","dir":"Articles","previous_headings":"FFI (FRANCE): data processing > Individual functions for FFI tables","what":"FFI SHRUB TABLES PROCESSING","title":"Inventory data ingestion process","text":"Information obtained table (FLORE.CSV) contains information kind species, trees shrub herbs exclusively give information shrubs. used R package GIFT (https://cran.r-project.org/web/packages/GIFT/index.html) (See appendix 1) . Therefore, table variable called growth_form used inform whether tree, shrub herbs. species record GIFT package, automatic classification done. Therefore, NA included shrub table ( happens regen table). Final variables id_unique_code, plot, dep, year, sp_code, sp_name, cover, height growth_form.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"ffi-regen-tables-processing","dir":"Articles","previous_headings":"FFI (FRANCE): data processing > Individual functions for FFI tables","what":"FFI REGEN TABLES PROCESSING","title":"Inventory data ingestion process","text":"Table regeneration obtained via two ways depending year protocol changed 2015 - explained IGN documentation. 2015, table COUVERT.CSV used FLORE.CSV used (shrub table process). “Starting 2015 campaign, non-measurable stratum longer undergoes determination coverage rate TCL TCA data COUVERT.csv file. Instead, information replaced ABOND data (FLORE.csv file). Consequently, STRATE one modality (R = measurable).” first explain process COUVERT.CSV. select records STRATE = “NR” , meaning non-measurable TREE, (.e., dbh< 7,5 cm). add new variable default value : dbh = NA ( maximum dbh present 7.4 cm). Final variables “id_unique_code”, “plot”, “dep”, “year”, “sp_code”, “sp_name”, “cover”, “dbh”, “height”, “growth_form” Process FLORE.CSV. (2015) process SHRUB table process performed end growth_form equal “tree” selected. Note data dbh, therefore, dbh = NA. species record GIFT package, automatic classification done. Therefore, NA included regen table . Final variables id_unique_code, plot, dep, year, sp_code, sp_name, cover, dbh, height growth_form.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"ffi-plot-tables-processing","dir":"Articles","previous_headings":"FFI (FRANCE): data processing > Individual functions for FFI tables","what":"FFI PLOT TABLES PROCESSING","title":"Inventory data ingestion process","text":"Information obtained two tables: PLACETTE.csv, contains basic information plot (VIST, COORDINATES), ECOLOGIE.CSV contains ecological information. Ecological information extracted plot level last year available information variables recorded every year. EXPO transformed centesimal degrees sexagesimal degrees (multiplying 0.9) . Additionally, add new variables: coord_sys coordinate system employed (LAMBERT) CRS . Variables regarding herb (HERB) woody vegetation (LIGN) collected understory table. final variables provided id_unique_code, province_code, class, subclass, plot, sp_name, sp_code, height cover.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"fia-us-data-processing","dir":"Articles","previous_headings":"","what":"FIA (US): data processing","title":"Inventory data ingestion process","text":"Forest Inventory Analysis (FIA) program, managed United States Forest Service, systematic effort collect, analyze, disseminate information nation’s forests. provides comprehensive data forest resources, including tree species, forest structure, composition, health, dynamics. FIA employs cyclical approach data collection, periodic inventories conducted across different regions United States. inventories typically occur 5 10-year cycle, although frequency may vary depending specific objectives resource availability. Data collection involves field measurements, remote sensing technologies, statistical sampling methods gather information forested lands. Field crews collect data tree species, size, density, growth, mortality, ecological attributes. Remote sensing data, aerial photography satellite imagery, also utilized supplement ground-based observations. Permanent plots FIA program established using systematic sampling approach, sample locations randomly selected within defined strata ensure representative coverage different forest types ownership. Forest Inventory Analysis (FIA) program, employs phased approach systematically monitor assess forest resources across nation. Phase 1 involves initial setup sampling framework, including stratification landscape, random selection sample plots, establishment permanent plot locations. Phase 2 consists intensive field data collection subset sample plots, focusing detailed measurements tree vegetation characteristics. phase provides comprehensive information forest composition, structure, health. Phase 3 encompasses specialized studies additional data collection efforts beyond standard inventory, addressing specific research questions management objectives. phase allows targeted investigations ecological processes, biodiversity, environmental change. Forest Inventory Analysis (FIA) program, several core variables commonly collected across sample plots. variables provide fundamental information forest resources essential monitoring assessing forest conditions. core variables include: tree attributes, stand attributes, forest health, vegetation composition site characteristics. Data acquisition Data obtained FIA data mart data can downloaded selecting state(S) interest entirely. case organized state folder archives similar names except prefix. https://apps.fs.usda.gov/fia/datamart/datamart.html use following files: “_TREE.csv”, “_PLOT.csv”, “_SURVEY.csv”, “_COND.csv”, “_SUBPLOT.csv”, “_VEG_SUBPLOT_SPP.csv”, “_SEEDLING.csv”, “_VEG_SUBPLOT.csv”, “_P2VEG_SUBPLOT_SPP.csv” also download : “FIADB Reference Table CSV Archive” ( folder zip format called FIADB_REFERENCE.zip ) save REF_SPECIES.CSV REF_PLANT_DICTIONARY.CSV. Package version files obtained march 2023 can provide updated table.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"fia-tree-tables-processing","dir":"Articles","previous_headings":"FIA (US): data processing > Individual functions for FIA tables","what":"FIA TREE TABLES PROCESSING","title":"Inventory data ingestion process","text":"table provides information tree 1 inch diameter (2.54cm) larger found microplot, subplot, core optional macroplot. Trees diameters 1.0- 4.9-inches, termed saplings, measured 6.8-foot radius microplot. Trees diameters 5.0-inches larger measured 24-foot radius subplots. Macroplot tree diameter thresholds determined according regional specifications (see regional field guides information).  Information obtained table “_TREE.CSV” . Variables transformed: dbh inches cm multiplying 2.54 height feet m multiplying 0.3048 density_factor acres hectares multiplying 0.4046856422 Final variables provided tree_id, status, dbh, height, sp_name, sp_code density_factor.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"fia-shrub-tables-processing","dir":"Articles","previous_headings":"FIA (US): data processing > Individual functions for FIA tables","what":"FIA SHRUB TABLES PROCESSING","title":"Inventory data ingestion process","text":"Shrub data obtained two different sources information : “_VEG_SUBPLOT_SPP.csv” case available information file specific plot year , protocol P3 phase “_P2VEG_SUBPLOT_SPP.csv” (P2 phase). Process _VEG_SUBPLOT_SPP.csv (P3) Cover layer 6 16 feet (1.8-4.9 m) Data obtained subplot level, certain information ( default Height ) aggregated plot level. use maximum cover percentage species different layers (SP_CANOPY_COVER_LAYER_X) calculate averaged height plot level. , mid point interval employed except layer 4 minimum used. information subplot level. Since P2VEG_SUBPLOT_SPP collects data different growth forms (growth_form), use REF_PLANT_DICTIONARY select data shrubs ( code = “Shrub”). Information herbs collected separated table (Herbs), growth_form= (“Forb/herb”, “Graminoids”) records. Final variables provided subplot, sp_name, height, cover, growth_form sp_code. Process P2VEG_SUBPLOT_SPP.csv (P2) Data obtained subplot level, certain information ( default height ) aggregated plot level. Height approximated using LAYER info. VERTICAL LAYER LAYER 1 –> 0 2.0 feet LAYER 2 –> 2.1 6.0 feet LAYER 3 –> 6.1 16.0 LAYER 4 –>Greater 16 feet information subplot level. data files ( P2VEG_SUBPLOT_SPP _VEG_SUBPLOT_SPP) , P3 data prioritized P2 data added gives additional information certain species. Final variables provided subplot, sp_name, height, cover, growth_form, growth_form_code sp_code.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"fia-regen-tables-processing","dir":"Articles","previous_headings":"FIA (US): data processing > Individual functions for FIA tables","what":"FIA REGEN TABLES PROCESSING","title":"Inventory data ingestion process","text":"Regeneration data (seedling) obtained : “_SEEDLING.csv” . Seedling: live trees species found microplot less 1 inch diameter least 6 inches length conifer species least 12 inches length hardwood species. TPA_UNADJ transformed acres hectares multiplying 0.4046856422 New variables added: n calculated multiplying density_factor * TREECOUNT_CALC height = 15 cm (default value) dbh = 2.54 cm (default value) Final variables provided subplot, sp_name, treecount_calc, density_factor, n, height, dbh sp_code.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"fia-plot-tables-processing","dir":"Articles","previous_headings":"FIA (US): data processing > Individual functions for FIA tables","what":"FIA PLOT TABLES PROCESSING","title":"Inventory data ingestion process","text":"Plot data (seedling) obtained : “PLOT.csv” , “SURVEY.csv”, “COND.csv” Data obtained last available year required information plot year interest. data queried year available, provide last recorded value. Note cases information plot condition collected , plot established. approximate latitude plot decimal degrees. Actual plot coordinates released Therefore, attribute approximately +/- 1 mile , annual inventory data, plots within +/- ½ mile. approximate longitude plot decimal degrees. Actual plot coordinates released. Therefore, attribute approximately +/- 1 mile , annual inventory data, plots within +/- ½ mile. P2 vegetation sampling status code. code indicating whether plot part P2 (Phase 2) vegetation sample included inventory. 0 Plot part P2 vegetation sample. 1 P2 vegetation data sampled accessible forest land conditions. 2 P2 vegetation data sampled accessible land conditions. . code indicating whether data collected vegetation structure growth habits , individual species well. Code Description 1 Data collected vegetation structure ; total aerial canopy cover canopy cover layer tally tree species (sizes), non-tally tree species (sizes),shrubs/subshrubs/woody vines, forbs, graminoids. 2 Vegetation structure data (LOD = 1) plus understory species composition data collected including four abundant species per GROWTH_HABIT_CD per subplot : seedlings saplings tree species (tally non-tally) <5 inches d.b.h. (d.r.c. woodland species), shrubs/subshrubs/woody vines, forbs, graminoids. 3 Vegetation structure data, understory species composition data (LOD = 2), plus four abundant tree species (tally non-tally) <5 inches d.b.h. (d.r.c woodland species) per GROWTH_HABIT_CD per subplot. add id_unique_code coord_sys : NAD 83 datum except SURVEY.RSCD = 26 SURVEY.STATECD = 60, 64, 66, 68, 69, 70 use WSG84 datum. Elevation transformed feet meters multiplying 0.3048. Values slope aspect divided different conditions plot may (forest, non-forest) , proxy use CONDID= 1 , normally designated condition class plot center (center subplot 1)","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"fia-subplot-tables-processing","dir":"Articles","previous_headings":"FIA (US): data processing > Individual functions for FIA tables","what":"FIA SUBPLOT TABLES PROCESSING","title":"Inventory data ingestion process","text":"Subplot data obtained : “SUBPLOT.csv” Subplot/macroplot status code. code indicating whether forest land sampled subplot/macroplot. 1- Sampled - least one accessible forest land condition present subplot 2-Sampled - accessible forest land condition present subplot 3-Nonsampled - possibility forest land. P2 vegetation subplot status code. code indicating subplot sampled P2 vegetation. 1- Subplot sampled P2 vegetation 2- Subplot sampled P2 vegetation Final variables subplot, slope_subplot, aspect_subplot, macro_cond, subplot_cond, micro_cond, subplot_status psveg_subplot_status.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"appendix-1","dir":"Articles","previous_headings":"FIA (US): data processing > Individual functions for FIA tables","what":"Appendix 1","title":"Inventory data ingestion process","text":"","code":"#FIRST WE NEED A SPECIES LIST  , IT  IS OBTAINED FROM CSV METADONNES   library(GIFT) #FINAL VECTOR OF SPECIES  fr_species_cdref    # growth form from GIFT trait_meta <- GIFT::GIFT_traits_meta() gf_trait_id <- trait_meta[which(trait_meta$Trait2 == \"Growth_form_1\"), ][[\"Lvl3\"]] growth_form <- GIFT::GIFT_traits(   trait_IDs = c(gf_trait_id), agreement = 0.66,   bias_ref = FALSE, bias_deriv = FALSE )  growth_form_lignified_france <- growth_form |>   dplyr::filter(work_species %in% fr_species_cdref) |>   dplyr::select(work_species, work_author, trait_value_1.2.1) |>   dplyr::distinct() |>   dplyr::rename(     GrowthForm = trait_value_1.2.1,     AccSpeciesName = work_species   ) head(forestables:::fr_species_cdref)  #> [1] \"Abies alba\"            \"Abies bornmuelleriana\" \"Abies cephalonica\"     #> [4] \"Abies concolor\"        \"Abies grandis\"         \"Abies nordmanniana\" head(forestables:::growth_form_lignified_france) #>       AccSpeciesName               work_author GrowthForm #> 1         Abies alba                     Mill.       tree #> 2      Abies grandis (Douglas ex D.Don) Lindl.       tree #> 3 Abies nordmanniana            (Steven) Spach       tree #> 4      Abies pinsapo                    Boiss.       tree #> 5      Abies procera                    Rehder       tree #> 6    Acacia dealbata                      Link       tree"},{"path":"https://emf-creaf.github.io/forestables/articles/documentacion.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Inventory data ingestion process","text":"ICONA (1990) Segundo inventario forestal nacional: Explicaciones y metodos. 1986-1995. Retrieved : https://www.miteco.gob.es/content/dam/miteco/es/biodiversidad/servicios/banco-datos-naturaleza/explicacionesymetodos_tcm30-281101.pdf IGN. (2014). Les données de l’inventaire forestier : état des lieux et évolution. Retrieved : https://inventaire-forestier.ign.fr/IMG/pdf/LP_1.pdf IGN. (2018). UN INVENTAIRE FORESTIER ANNUEL sur l’ensemble de la France métropolitaine. Retrieved https://inventaire-forestier.ign.fr/IMG/pdf/180920_plaquette-methode_fr.pdf IGN. (2022). MÉTHODOLOGIE Pour bien comprendre les résultats publiés 2017-2021. Retrieved : https://inventaire-forestier.ign.fr/IMG/pdf/methodologie-2022.pdf Forest Service USDA. (2023) Forest Inventory Analysis Database: Database Description User Guide Phase 2 (version 9.1) Retrieved : https://www.fs.usda.gov/research/understory/forest-inventory--analysis-database-user-guide-phase-2 MINISTERIO DE TRANSICIÓN ECOLÓGICA Y RETO DEMOGRÁFICO. (n.d.). Cuarto Inventario Forestal Nacional (IFN4): Descripción de los códigos de la base de datos de campo. Retrieved https://www.miteco.gob.es/content/dam/miteco/es/biodiversidad/temas/inventarios-nacionales/documentador_sig_tcm30-536622.pdf TRAGSATEC (n.d.). 3er Inventario Forestal Nacional: Descripción de los códigos de la base de datos de campo. Retrieved https://www.miteco.gob.es/content/dam/miteco/es/biodiversidad/servicios/banco-datos-naturaleza/documentador_bdcampo_ifn3_tcm30-282240.pdf","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/inventory_data_tibble.html","id":"forest-inventory-data-outputs","dir":"Articles","previous_headings":"","what":"Forest inventory data outputs","title":"Inventory data output","text":"forestables tries harmonize, extent, data different forest inventories. makes easier design workflows work different inventories. vignette shows explains forestables output tibble.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/inventory_data_tibble.html","id":"example-objects","dir":"Articles","previous_headings":"Forest inventory data outputs","what":"Example objects","title":"Inventory data output","text":"forestables ships output examples: going use examples explain structure output.","code":"# load the library library(forestables) #> Loading required package: data.table #> Loading required package: dtplyr  # fia example fia_output_example #> # A tibble: 4,193 × 24 #>    id_unique_code  year  plot coordx coordy coord_sys   crs   elev aspect slope #>    <chr>          <int> <int>  <dbl>  <dbl> <chr>     <dbl>  <dbl>  <int> <int> #>  1 US_2_20_39004   2015 39004  -149.   61.1 NAD83      4269  762       NA    NA #>  2 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.     220    43 #>  3 US_2_20_1615    2015  1615  -149.   60.9 NAD83      4269  579.      NA    NA #>  4 US_2_20_1470    2015  1470  -149.   61.2 NAD83      4269 1189.      NA    NA #>  5 US_2_20_57145   2015 57145  -148.   61.1 NAD83      4269  945.      NA    NA #>  6 US_2_20_29733   2015 29733  -149.   61.3 NAD83      4269 1006.      NA    NA #>  7 US_2_20_63035   2015 63035  -149.   61.1 NAD83      4269  884.      NA    NA #>  8 US_2_20_16154   2015 16154  -150.   61.1 NAD83      4269 1067.      NA    NA #>  9 US_2_20_65841   2015 65841  -150.   61.1 NAD83      4269   30.5     NA    NA #> 10 US_2_20_65097   2015 65097  -150.   61.4 NAD83      4269   30.5     NA    NA #> # ℹ 4,183 more rows #> # ℹ 14 more variables: country <chr>, state_code <int>, state_ab <chr>, #> #   state_name <chr>, county_code <chr>, p3panel <int>, #> #   p2veg_sampling_status_cd <int>, rscd <int>, design_code <int>, #> #   subplot <list>, tree <list>, understory <list>, regen <list>, #> #   p2veg_sampling_level_detail_cd <int>  # ffi example ffi_output_example #> # A tibble: 499 × 16 #>    id_unique_code  year plot  coordx coordy coord_sys   crs aspect slope country #>    <chr>          <int> <chr>  <dbl>  <dbl> <chr>     <dbl>  <dbl> <int> <chr>   #>  1 FR_42_500534    2015 5005… 8.14e5 6.48e6 LAMBERT    2154   85.5    43 FR      #>  2 FR_42_503498    2015 5034… 7.61e5 6.53e6 LAMBERT    2154  130.     12 FR      #>  3 FR_42_504950    2015 5049… 7.93e5 6.55e6 LAMBERT    2154  333      15 FR      #>  4 FR_42_505301    2015 5053… 7.72e5 6.48e6 LAMBERT    2154   NA       0 FR      #>  5 FR_42_505321    2015 5053… 8.22e5 6.48e6 LAMBERT    2154  180      18 FR      #>  6 FR_42_507479    2015 5074… 7.76e5 6.50e6 LAMBERT    2154   NA      NA FR      #>  7 FR_42_509007    2015 5090… 8.07e5 6.53e6 LAMBERT    2154  266.     28 FR      #>  8 FR_42_512511    2015 5125… 8.08e5 6.46e6 LAMBERT    2154   23.4    15 FR      #>  9 FR_42_512565    2015 5125… 8.22e5 6.47e6 LAMBERT    2154   22.5    46 FR      #> 10 FR_42_512609    2015 5126… 7.97e5 6.53e6 LAMBERT    2154  313.     36 FR      #> # ℹ 489 more rows #> # ℹ 6 more variables: dep <chr>, dep_name <chr>, visite <int>, tree <list>, #> #   understory <list>, regen <list>  # ifn example ifn_output_example #> # A tibble: 5,207 × 24 #>    id_unique_code   year  plot  coordx coordy coord_sys   crs  elev aspect slope #>    <chr>            <chr> <chr>  <dbl>  <dbl> <chr>     <dbl> <dbl>  <dbl> <dbl> #>  1 24_0191_NN_A1_A1 92    0191  675000 4.75e6 ED50      23029  1100     NA    NA #>  2 24_0192_NN_A1_xx 92    0192  675000 4.75e6 ED50      23029  1300     NA    NA #>  3 24_0193_NN_xx_xx 92    0193  700000 4.75e6 ED50      23029  1500     NA    NA #>  4 24_0194_NN_xx_xx 92    0194  687000 4.75e6 ED50      23029  1400     NA    NA #>  5 24_0195_NN_xx_xx 92    0195  700000 4.75e6 ED50      23029  1300     NA    NA #>  6 24_0196_NN_xx_xx 92    0196  683000 4.75e6 ED50      23029  1600     NA    NA #>  7 24_0197_NN_xx_xx 92    0197  682000 4.75e6 ED50      23029  1500     NA    NA #>  8 24_0198_NN_A1_A1 92    0198  684000 4.75e6 ED50      23029  1300     NA    NA #>  9 24_0199_NN_A3C_… 92    0199  692000 4.75e6 ED50      23029  1400     NA    NA #> 10 24_0200_NN_xx_xx 92    0200  693000 4.75e6 ED50      23029  1200     NA    NA #> # ℹ 5,197 more rows #> # ℹ 14 more variables: country <chr>, version <chr>, class <chr>, #> #   subclass <chr>, province_code <chr>, province_name_original <chr>, #> #   ca_name_original <chr>, sheet_ntm <chr>, huso <dbl>, slope_mean <chr>, #> #   type <int>, tree <list>, understory <list>, regen <list>"},{"path":"https://emf-creaf.github.io/forestables/articles/inventory_data_tibble.html","id":"output-structure","dir":"Articles","previous_headings":"Forest inventory data outputs","what":"Output structure","title":"Inventory data output","text":"Forest inventory data outputs forestables data frames (tibbles) row plot/year combination (plot/version IFN). Metadata plot presented first columns (plot IDs, coordinates info, topography…). last three columns always nested columns tree table plot/year, understory table plot/year regen table plot/year.  Common metadata among different national forest inventories :id_unique_code, year, plot, coordx, coordy, coord_sys, crs, elev, aspect, slope, country. FIA unique metadata:state_code, state_ab, state_name, county_code, p3panel, p2veg_sampling_status_cd, p2veg_sampling_level_detail, rscd, design_code, subplot. IFN unique metadata:version, class, subclass, province_code, province_name_original, ca_name_original, sheet_ntm, huso, slope_mean, type. FFI unique metadata:dep, dep_name, visite. Nested columns common national forest inventories:tree, understory, regen know variable, can check Description functions vignette.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/inventory_data_tibble.html","id":"post-processing-outputs","dir":"Articles","previous_headings":"Forest inventory data outputs","what":"Post-processing outputs","title":"Inventory data output","text":"Cleaning empty data. default, ifn_, fia_ ffi_to_tibble functions return plots requested, even don’t data year version. clean_empty() function can used retrieving data remove empty plots tree, shrub, herbs /regen columns: Transforming spatial object. default, ifn_, fia_ ffi_to_tibble functions return tibble (data frame). tibbles spatial information able convert plots spatial points. conversion straightforward sometimes plots inventory different coordinate systems projections. inventory_to_sf() function can used directly make necessary coordinate transformations return plots points latitude-longitude format (CRS = 4326):","code":"# FIA plots in AK for the 2015-2018 period nrow(fia_output_example) #> [1] 4193 # FIA plots in AK for the 2015-2018 period with tree data nrow(clean_empty(fia_output_example, c(\"tree\"))) #> [1] 1532 # FIA plots in AK for the 2015-2018 period with tree AND shrub AND herbs AND regen data nrow(clean_empty(fia_output_example, c(\"tree\", \"shrub\", \"herbs\", \"regen\"))) #> [1] 1166 ifn_output_example |>   clean_empty(\"tree\") |>   inventory_as_sf() #> Simple feature collection with 3835 features and 23 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -7.052923 ymin: 42.09784 xmax: -4.781532 ymax: 43.2099 #> Geodetic CRS:  WGS 84 #> # A tibble: 3,835 × 24 #>      crs id_unique_code   year  plot  coord_sys_orig  elev aspect slope country #>    <dbl> <chr>            <chr> <chr> <chr>          <dbl>  <dbl> <dbl> <chr>   #>  1  4326 24_0191_NN_A1_A1 92    0191  ED50            1100     NA    NA ES      #>  2  4326 24_0192_NN_A1_xx 92    0192  ED50            1300     NA    NA ES      #>  3  4326 24_0194_NN_xx_xx 92    0194  ED50            1400     NA    NA ES      #>  4  4326 24_0198_NN_A1_A1 92    0198  ED50            1300     NA    NA ES      #>  5  4326 24_0200_NN_xx_xx 92    0200  ED50            1200     NA    NA ES      #>  6  4326 24_0201_NN_A1_A1 92    0201  ED50            1300     NA    NA ES      #>  7  4326 24_0202_NN_xx_xx 92    0202  ED50            1300     NA    NA ES      #>  8  4326 24_0207_NN_A1_A1 92    0207  ED50            1300     NA    NA ES      #>  9  4326 24_0208_NN_xx_xx 92    0208  ED50            1400     NA    NA ES      #> 10  4326 24_0209_NN_xx_xx 92    0209  ED50            1100     NA    NA ES      #> # ℹ 3,825 more rows #> # ℹ 15 more variables: version <chr>, class <chr>, subclass <chr>, #> #   province_code <chr>, province_name_original <chr>, ca_name_original <chr>, #> #   sheet_ntm <chr>, huso <dbl>, slope_mean <chr>, type <int>, tree <list>, #> #   understory <list>, regen <list>, geometry <POINT [°]>, crs_orig <dbl>"},{"path":"https://emf-creaf.github.io/forestables/articles/inventory_data_tibble.html","id":"tree-column","dir":"Articles","previous_headings":"Forest inventory data outputs","what":"tree column","title":"Inventory data output","text":"tree nested column, meaning cell contain tree data table row (.e. tree data table plot year/version). plot metadata, effort harmonize tree data national forest inventories done. Common tree variables among different national forest inventories:tree, sp_code, sp_name, status, density_factor, dia, height. IFN unique tree variables:tree_ifn2, tree_ifn3, tree_ifn4 cubing_form, quality_wood. Also, IFN lack status variable. FFI unique tree variables:height_last_recorded, status5, espar. easiest way access tree data unnest():","code":"fia_output_example |>   clean_empty(\"tree\") |>   unnest(\"tree\", names_sep = \"_\") #> # A tibble: 55,220 × 30 #>    id_unique_code  year  plot coordx coordy coord_sys   crs  elev aspect slope #>    <chr>          <int> <int>  <dbl>  <dbl> <chr>     <dbl> <dbl>  <int> <int> #>  1 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.    220    43 #>  2 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.    220    43 #>  3 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.    220    43 #>  4 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.    220    43 #>  5 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.    220    43 #>  6 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.    220    43 #>  7 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.    220    43 #>  8 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.    220    43 #>  9 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.    220    43 #> 10 US_2_20_6376    2015  6376  -149.   60.9 NAD83      4269  335.    220    43 #> # ℹ 55,210 more rows #> # ℹ 20 more variables: country <chr>, state_code <int>, state_ab <chr>, #> #   state_name <chr>, county_code <chr>, p3panel <int>, #> #   p2veg_sampling_status_cd <int>, rscd <int>, design_code <int>, #> #   subplot <list>, tree_tree_id <int>, tree_sp_code <dbl>, tree_sp_name <chr>, #> #   tree_status <int>, tree_density_factor <dbl>, tree_dbh <dbl>, #> #   tree_height <dbl>, understory <list>, regen <list>, …"},{"path":"https://emf-creaf.github.io/forestables/articles/inventory_data_tibble.html","id":"understory-column","dir":"Articles","previous_headings":"Forest inventory data outputs","what":"understory column","title":"Inventory data output","text":"understory also nested column. contains data tables shrubs herbs, found forest inventory plot. Common understory variables among different national forest inventories:shrub, herbs. also nested columns, kind understory different data structure. FFI unique understory variables:lign1_pct, lign2_pct.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/inventory_data_tibble.html","id":"shrub-column","dir":"Articles","previous_headings":"Forest inventory data outputs > understory column","what":"shrub column","title":"Inventory data output","text":"Common shrub variables among different national forest inventories:sp_code, sp_name, cover, height, growth_form FIA unique shrub variables:subplot, growth_form_code.","code":""},{"path":"https://emf-creaf.github.io/forestables/articles/inventory_data_tibble.html","id":"herbs-column","dir":"Articles","previous_headings":"Forest inventory data outputs > understory column","what":"herbs column","title":"Inventory data output","text":"herbs data different inventory, present IFN. FIA unique herbs variables:subplot, sp_name, growth_form_code, height, cover, growth_form, sp_code FFI unique herbs variables:herb_pct easiest way access understory data unnest():","code":"ffi_output_example |>   clean_empty(\"shrub\") |>   unnest(\"understory\") |>   unnest(\"shrub\", names_sep = \"_\") #> # A tibble: 4,760 × 23 #>    id_unique_code  year plot  coordx coordy coord_sys   crs aspect slope country #>    <chr>          <int> <chr>  <dbl>  <dbl> <chr>     <dbl>  <dbl> <int> <chr>   #>  1 FR_42_1000969   2015 1000… 8.24e5 6.47e6 LAMBERT    2154    342    12 FR      #>  2 FR_42_1000969   2015 1000… 8.24e5 6.47e6 LAMBERT    2154    342    12 FR      #>  3 FR_42_1000969   2015 1000… 8.24e5 6.47e6 LAMBERT    2154    342    12 FR      #>  4 FR_42_1000969   2015 1000… 8.24e5 6.47e6 LAMBERT    2154    342    12 FR      #>  5 FR_42_1000969   2015 1000… 8.24e5 6.47e6 LAMBERT    2154    342    12 FR      #>  6 FR_42_1000969   2015 1000… 8.24e5 6.47e6 LAMBERT    2154    342    12 FR      #>  7 FR_42_1000969   2015 1000… 8.24e5 6.47e6 LAMBERT    2154    342    12 FR      #>  8 FR_42_1000969   2015 1000… 8.24e5 6.47e6 LAMBERT    2154    342    12 FR      #>  9 FR_42_1000969   2015 1000… 8.24e5 6.47e6 LAMBERT    2154    342    12 FR      #> 10 FR_42_1000969   2015 1000… 8.24e5 6.47e6 LAMBERT    2154    342    12 FR      #> # ℹ 4,750 more rows #> # ℹ 13 more variables: dep <chr>, dep_name <chr>, visite <int>, tree <list>, #> #   lign1_pct <int>, lign2_pct <int>, shrub_sp_code <chr>, shrub_sp_name <chr>, #> #   shrub_cover <dbl>, shrub_height <lgl>, shrub_growth_form <chr>, #> #   herbs <list>, regen <list>  ffi_output_example |>   clean_empty(\"herbs\") |>   unnest(\"understory\") |>   unnest(\"herbs\", names_sep = \"_\") #> # A tibble: 499 × 19 #>    id_unique_code  year plot  coordx coordy coord_sys   crs aspect slope country #>    <chr>          <int> <chr>  <dbl>  <dbl> <chr>     <dbl>  <dbl> <int> <chr>   #>  1 FR_42_500534    2015 5005… 8.14e5 6.48e6 LAMBERT    2154   85.5    43 FR      #>  2 FR_42_503498    2015 5034… 7.61e5 6.53e6 LAMBERT    2154  130.     12 FR      #>  3 FR_42_504950    2015 5049… 7.93e5 6.55e6 LAMBERT    2154  333      15 FR      #>  4 FR_42_505301    2015 5053… 7.72e5 6.48e6 LAMBERT    2154   NA       0 FR      #>  5 FR_42_505321    2015 5053… 8.22e5 6.48e6 LAMBERT    2154  180      18 FR      #>  6 FR_42_507479    2015 5074… 7.76e5 6.50e6 LAMBERT    2154   NA      NA FR      #>  7 FR_42_509007    2015 5090… 8.07e5 6.53e6 LAMBERT    2154  266.     28 FR      #>  8 FR_42_512511    2015 5125… 8.08e5 6.46e6 LAMBERT    2154   23.4    15 FR      #>  9 FR_42_512565    2015 5125… 8.22e5 6.47e6 LAMBERT    2154   22.5    46 FR      #> 10 FR_42_512609    2015 5126… 7.97e5 6.53e6 LAMBERT    2154  313.     36 FR      #> # ℹ 489 more rows #> # ℹ 9 more variables: dep <chr>, dep_name <chr>, visite <int>, tree <list>, #> #   lign1_pct <int>, lign2_pct <int>, shrub <list>, herbs_herb_pct <int>, #> #   regen <list>"},{"path":"https://emf-creaf.github.io/forestables/articles/inventory_data_tibble.html","id":"regen-column","dir":"Articles","previous_headings":"Forest inventory data outputs","what":"regen column","title":"Inventory data output","text":"regen nested column, meaning cell contains (tree) regeneration data table row (.e. regeneration data table plot year/version). plot metadata, effort harmonize regeneration data inventories done. Common regen variables among different national forest inventories:sp_code, sp_name, density_factor, dbh, height, n. FIA unique regen variables:subplot, treecount_calc. FFI unique regen variables:cover, growth_form easiest way access regen data unnest():","code":"ifn_output_example |>   clean_empty(\"regen\") |>   unnest(\"regen\", names_sep = \"_\") #> # A tibble: 14,363 × 29 #>    id_unique_code   year  plot  coordx coordy coord_sys   crs  elev aspect slope #>    <chr>            <chr> <chr>  <dbl>  <dbl> <chr>     <dbl> <dbl>  <dbl> <dbl> #>  1 24_0191_NN_A1_A1 92    0191  675000 4.75e6 ED50      23029  1100     NA    NA #>  2 24_0191_NN_A1_A1 92    0191  675000 4.75e6 ED50      23029  1100     NA    NA #>  3 24_0191_NN_A1_A1 92    0191  675000 4.75e6 ED50      23029  1100     NA    NA #>  4 24_0191_NN_A1_A1 92    0191  675000 4.75e6 ED50      23029  1100     NA    NA #>  5 24_0192_NN_A1_xx 92    0192  675000 4.75e6 ED50      23029  1300     NA    NA #>  6 24_0192_NN_A1_xx 92    0192  675000 4.75e6 ED50      23029  1300     NA    NA #>  7 24_0192_NN_A1_xx 92    0192  675000 4.75e6 ED50      23029  1300     NA    NA #>  8 24_0194_NN_xx_xx 92    0194  687000 4.75e6 ED50      23029  1400     NA    NA #>  9 24_0194_NN_xx_xx 92    0194  687000 4.75e6 ED50      23029  1400     NA    NA #> 10 24_0194_NN_xx_xx 92    0194  687000 4.75e6 ED50      23029  1400     NA    NA #> # ℹ 14,353 more rows #> # ℹ 19 more variables: country <chr>, version <chr>, class <chr>, #> #   subclass <chr>, province_code <chr>, province_name_original <chr>, #> #   ca_name_original <chr>, sheet_ntm <chr>, huso <dbl>, slope_mean <chr>, #> #   type <int>, tree <list>, understory <list>, regen_sp_code <dbl>, #> #   regen_sp_name <chr>, regen_dbh <dbl>, regen_height <dbl>, #> #   regen_density_factor <dbl>, regen_n <dbl>"},{"path":"https://emf-creaf.github.io/forestables/articles/selecting_plots.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Selecting plots","text":"vignette explains retrieve information available inventory plots using select based use modelling analyses. Workflows three inventories (FFI, FIA IFN) shown ","code":"# libraries library(forestables) #> Loading required package: data.table #> Loading required package: dtplyr library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:data.table': #>  #>     between, first, last #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE library(ggplot2) library(stringr) library(future)"},{"path":"https://emf-creaf.github.io/forestables/articles/selecting_plots.html","id":"ffi-workflow","dir":"Articles","previous_headings":"","what":"FFI workflow","title":"Selecting plots","text":"French forest inventory (FFI), going select forest plots Mediterranean area sampled 2012. First step select departments corresponding Mediterranean area. Now can use department codes obtain basic metadata (plot codes, coordinates campaign year) show_plots_from(). need inventory want plots , folder containing downloaded inventory files vector department codes (created ): plots present departments years, want 2012 plots, filter results campaign year: Now can visualize geographic distribution plots selected:  seems like plots need, going create filter list use retrieve plots data inventory files: ready retrieving data plots ffi_to_tibble(). need department codes, year, filter list obtained path folder containing inventory files. Now can explore data, example abundant species mean diameter plot :","code":"# choose the departments, those in the mediterranean area mediterranean_deps <- c(   \"04\", \"06\", \"11\", \"13\", \"30\",   \"34\", \"66\", \"83\", \"84\" ) # download the FFI data if not already (In this example the data is downloaded # in a temporal folder and is removed after the R session ends) ffi_folder <- tempdir() download_inventory(\"FFI\", ffi_folder) #> ℹ Downloading FFI available data #> ℹ Unzipping downloaded data in /tmp/RtmpAPJyNO #> ✔ Done! # get the plots for those departments mediterranean_plots <- show_plots_from(   inventory = \"FFI\",   folder = ffi_folder,   departments = mediterranean_deps ) mediterranean_plots #> Simple feature collection with 17771 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1.711533 ymin: 42.34551 xmax: 7.693261 ymax: 44.59827 #> Geodetic CRS:  WGS 84 #> # A tibble: 17,771 × 4 #>    CAMPAGNE   IDP DEP              geometry #>  *    <int> <int> <chr>         <POINT [°]> #>  1     2005    41 04    (6.243377 44.06373) #>  2     2005   132 11    (2.008273 43.05466) #>  3     2005   252 84      (5.48586 43.9083) #>  4     2005   257 66    (2.545421 42.53404) #>  5     2005   269 04      (5.8641 43.98667) #>  6     2005   287 13    (5.657335 43.43539) #>  7     2005   343 83    (6.405588 43.19379) #>  8     2005   405 11     (2.424819 43.0731) #>  9     2005   498 34     (2.942891 43.3949) #> 10     2005   507 83    (6.150034 43.41908) #> # ℹ 17,761 more rows mediterranean_plots_2012 <- mediterranean_plots |>   filter(CAMPAGNE == 2012) mediterranean_plots_2012 #> Simple feature collection with 1174 features and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1.711729 ymin: 42.3546 xmax: 7.670067 ymax: 44.58135 #> Geodetic CRS:  WGS 84 #> # A tibble: 1,174 × 4 #>    CAMPAGNE    IDP DEP              geometry #>  *    <int>  <int> <chr>         <POINT [°]> #>  1     2012 200039 83    (5.790283 43.59314) #>  2     2012 200059 06    (7.025479 44.15895) #>  3     2012 200105 04    (6.586601 43.97884) #>  4     2012 200283 06     (7.12369 44.13667) #>  5     2012 200547 04    (5.647505 44.11946) #>  6     2012 200694 06    (7.597051 44.11485) #>  7     2012 200809 11    (2.595977 42.98299) #>  8     2012 201113 11     (2.547623 43.1448) #>  9     2012 201148 66    (2.253964 42.58809) #> 10     2012 201268 06    (7.670067 44.09328) #> # ℹ 1,164 more rows ggplot(mediterranean_plots_2012) +   geom_sf(     aes(color = DEP), alpha = 0.4,     show.legend = FALSE   ) +   scale_color_manual(values = hcl.colors(9, palette = \"Zissou 1\")) ffi_filter_list <- mediterranean_plots_2012 |>   create_filter_list()  ## we can do all in one pipe: # ffi_filter_list <- #   show_plots_from(\"FFI\", folder = ffi_folder, departments = mediterranean_deps) |> #   filter(CAMPAGNE == 2012) |> #   create_filter_list() ## We can parallelize the process with the future package. ## In this case we use 4 parallel processes library(future) plan(\"multisession\", workers = 4)  # get the data for the selected plots ffi_data_2012 <- ffi_to_tibble(   departments = mediterranean_deps,   years = 2012,   filter_list = ffi_filter_list,   folder = ffi_folder ) #> Start #> ℹ Processing 1 year #> Getting ready to retrieve 1174 plots for 2012  ffi_data_2012 #> # A tibble: 1,174 × 16 #>    id_unique_code  year plot  coordx coordy coord_sys   crs aspect slope country #>    <chr>          <dbl> <chr>  <dbl>  <dbl> <chr>     <dbl>  <dbl> <int> <chr>   #>  1 FR_04_200105    2012 2001… 9.88e5 6.33e6 LAMBERT    2154   284.    52 FR      #>  2 FR_04_200547    2012 2005… 9.12e5 6.34e6 LAMBERT    2154   108     23 FR      #>  3 FR_04_201867    2012 2018… 9.34e5 6.36e6 LAMBERT    2154   315     42 FR      #>  4 FR_04_202314    2012 2023… 9.28e5 6.33e6 LAMBERT    2154   140.    16 FR      #>  5 FR_04_202608    2012 2026… 9.80e5 6.34e6 LAMBERT    2154   148.    51 FR      #>  6 FR_04_204464    2012 2044… 9.46e5 6.36e6 LAMBERT    2154    NA     16 FR      #>  7 FR_04_205338    2012 2053… 9.38e5 6.36e6 LAMBERT    2154   162     66 FR      #>  8 FR_04_205858    2012 2058… 9.66e5 6.36e6 LAMBERT    2154   238.    72 FR      #>  9 FR_04_206893    2012 2068… 9.82e5 6.33e6 LAMBERT    2154   306     17 FR      #> 10 FR_04_208480    2012 2084… 9.40e5 6.30e6 LAMBERT    2154   351     35 FR      #> # ℹ 1,164 more rows #> # ℹ 6 more variables: dep <chr>, dep_name <chr>, visite <int>, tree <list>, #> #   understory <list>, regen <list> ffi_data_2012 |>   # clean plots without tree data   clean_empty(c(\"tree\")) |>   # convert inventory table to sf/spatial object   inventory_as_sf() |>   # unnest the tree data   unnest(\"tree\") |>   # calculate dbh by species in each plot   dplyr::group_by(id_unique_code, sp_name) |>   dplyr::summarise(dbh = mean(dbh, na.rm = TRUE), dep = unique(dep), n = n()) |>   dplyr::filter(!is.nan(dbh)) |>   # filter species with 25 or less entries (plots)   dplyr::group_by(sp_name) |>   dplyr::mutate(n = n()) |>   dplyr::filter(n > 15) |>   # let's plot   ggplot() +   geom_sf(aes(geometry = geometry, color = dbh), size = 2.2, alpha = 0.8) +   scale_color_gradientn(colors = hcl.colors(360, \"PinkYl\", rev = TRUE)) +   facet_wrap(~sp_name, ncol = 3) +   theme_minimal() #> `summarise()` has grouped output by 'id_unique_code'. You can override using #> the `.groups` argument."},{"path":"https://emf-creaf.github.io/forestables/articles/selecting_plots.html","id":"fia-workflow","dir":"Articles","previous_headings":"","what":"FIA workflow","title":"Selecting plots","text":"USA forest inventory (FIA) going explore Hawaii inventory plots 2019. steps similar FFI example. First need state code, retrieve plots metadata filter desired year, 2019: can visualize geographic distribution plots:  Now forest inventory plots selected, can create filter list retrieve data plots: now everything need retrieving data fia_to_tibble(). need provide state codes, year, filter list obtained path folder containing forest inventory files. French forest inventory, can now explore data, example, abundant species mean diameter:","code":"# download the FIA data if not already (In this example the data is downloaded # in a temporal folder and is removed after the R session ends) fia_folder <- tempdir() download_inventory(\"FIA\", fia_folder, states = \"HI\") #> ℹ Downloading FIA available data #> ℹ Unzipping downloaded data in /tmp/RtmpAPJyNO #> ✔ Done!  # get the plots for those departments hawaii_plots_2019 <- show_plots_from(   inventory = \"FIA\",   folder = fia_folder,   states = \"HI\" ) |>   filter(INVYR == 2019) hawaii_plots_2019 #> Simple feature collection with 1177 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -160.2893 ymin: 18.87413 xmax: -154.7896 ymax: 22.26451 #> Geodetic CRS:  WGS 84 #> # A tibble: 1,177 × 6 #>    INVYR STATECD COUNTYCD  PLOT STATEAB             geometry #>  * <int>   <int>    <int> <int> <chr>            <POINT [°]> #>  1  2019      15        1  2125 HI       (-155.875 20.29327) #>  2  2019      15        1  2127 HI      (-155.8317 20.27703) #>  3  2019      15        1  2130 HI      (-155.7942 20.26314) #>  4  2019      15        1  2133 HI      (-155.7351 20.26385) #>  5  2019      15        1  2137 HI      (-155.9226 20.24566) #>  6  2019      15        1  2140 HI      (-155.8627 20.23504) #>  7  2019      15        1  2143 HI      (-155.8276 20.23026) #>  8  2019      15        1  2146 HI      (-155.7559 20.21695) #>  9  2019      15        1  2149 HI      (-155.7324 20.21962) #> 10  2019      15        1  2150 HI      (-155.9376 20.22124) #> # ℹ 1,167 more rows # USA map for plotting ggplot(hawaii_plots_2019) +   geom_sf(aes(color = STATEAB, alpha = 0.4)) +   coord_sf(xlim = c(-160.6, -154.5), ylim = c(18.5, 22.5)) +   scale_color_manual(values = hcl.colors(1, palette = \"Zissou 1\")) fia_filter_list <- hawaii_plots_2019 |>   create_filter_list()  ## we can do all in one pipe: # fia_filter_list <- #   show_plots_from(\"FIA\", folder = fia_folder, states = \"HI\") |> #   filter(INVYR == 2019) |> #   create_filter_list() ## We can parallelize the process with the future package. ## In this case we use 4 parallel processes library(future) plan(\"multisession\", workers = 4)  # get the data fia_data_2019 <- fia_to_tibble(   states = \"HI\",   years = 2019,   filter_list = fia_filter_list,   folder = fia_folder ) #> Start #> ℹ Processing 1 year #> Getting ready to retrieve 1177 plots for 2019 fia_data_2019 |>   # clean plots without tree data   clean_empty(c(\"tree\")) |>   # convert inventory table to sf/spatial object   inventory_as_sf() |>   # unnest the tree data   unnest(\"tree\") |>   # calculate dbh by species in each plot   dplyr::group_by(id_unique_code, sp_name) |>   dplyr::summarise(     dbh = mean(dbh, na.rm = TRUE),     state_ab = unique(state_ab), n = n()   ) |>   dplyr::filter(!is.nan(dbh)) |>   # filter species with 100 or less entries (plots)   dplyr::group_by(sp_name) |>   dplyr::mutate(n = n()) |>   dplyr::filter(n > 20) |>   # let's plot   ggplot() +   geom_sf(aes(geometry = geometry, color = dbh), size = 2.2, alpha = 0.8) +   coord_sf(xlim = c(-160.6, -154.5), ylim = c(18.5, 22.5)) +   scale_color_gradientn(colors = hcl.colors(360, \"PinkYl\", rev = TRUE)) +   facet_wrap(~sp_name, ncol = 3) +   theme_minimal() #> `summarise()` has grouped output by 'id_unique_code'. You can override using #> the `.groups` argument."},{"path":"https://emf-creaf.github.io/forestables/articles/selecting_plots.html","id":"ifn-workflow","dir":"Articles","previous_headings":"","what":"IFN workflow","title":"Selecting plots","text":"Spanish forest inventory (IFN) explore Cantabric coast forest plots. IFN, differently national inventories, doe offer plot data years, versions. “ifn2” (early 90s), “ifn3” (early 00s) “ifn4” (2014-15). going o retrieve plots early 00s version (“ifn3”): visualize geographic distribution plots can use:  Now inventory plots selected, can obtain filter list retrieve data plots: now everything need retrieving data ifn_to_tibble(): French USA national forest inventories, can now explore data, example, abundant species mean diameter:","code":"# choose the provinces, those in the Cantabric area north_spain_provinces <- c(\"24\", \"33\", \"15\", \"27\", \"39\", \"48\", \"20\")  # download the IFN data if not already (In this example the data is downloaded # in a temporal folder and is removed after the R session ends) ifn_folder <- tempdir() download_inventory(\"IFN\", ifn_folder) #> ℹ Downloading IFN available data #> ℹ Unzipping downloaded data in /tmp/RtmpAPJyNO #> Warning: ✖ The following files failed to be downloaded: #> ifn4_avila_tcm30-536598.zip, ifn4_cantabria_tcm30-536602.zip, #> ifn4_leon_tcm30-536581.zip, ifn4_murcia_tcm30-536584.zip, #> ifn4_navarra_tcm30-536585.zip, ifn4_paisvasco_tcm30-536587.zip, #> ifn4_palencia_tcm30-536588.zip, ifn4_segovia_tcm30-536591.zip, #> ifn4_valladolid_tcm30-536593.zip, and ifn4_zamora_tcm30-536594.zip #> ✔ Done!  # get the plots for those departments north_spain_plots <- show_plots_from(   \"IFN\",   folder = ifn_folder,   provinces = north_spain_provinces, versions = \"ifn3\" ) north_spain_plots #> Simple feature collection with 14935 features and 6 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -9.271574 ymin: 42.08195 xmax: -1.743428 ymax: 43.7598 #> Geodetic CRS:  WGS 84 #> First 10 features: #>      crs    id_unique_code version province_code province_name_original plot #> 1  23029  24_0191_NN_A1_A1    ifn3            24                   León 0191 #> 2  23029  24_0192_NN_A1_xx    ifn3            24                   León 0192 #> 3  23029  24_0194_xx_A4_xx    ifn3            24                   León 0194 #> 4  23029  24_0196_xx_A4_xx    ifn3            24                   León 0196 #> 5  23029  24_0197_xx_A4_A1    ifn3            24                   León 0197 #> 6  23029  24_0198_NN_A1_A1    ifn3            24                   León 0198 #> 7  23029 24_0199_NN_A3C_xx    ifn3            24                   León 0199 #> 8  23029 24_0199_xx_A3E_xx    ifn3            24                   León 0199 #> 9  23029  24_0200_xx_A4_A1    ifn3            24                   León 0200 #> 10 23029  24_0201_NN_A1_A1    ifn3            24                   León 0201 #>                      geometry #> 1  POINT (-6.859255 42.86266) #> 2  POINT (-6.859566 42.85366) #> 3  POINT (-6.711141 42.89581) #> 4  POINT (-6.760746 42.87878) #> 5  POINT (-6.773305 42.87002) #> 6  POINT (-6.748838 42.86954) #> 7  POINT (-6.650977 42.86757) #> 8  POINT (-6.650977 42.86757) #> 9  POINT (-6.638745 42.86732) #> 10 POINT (-6.810325 42.86173) ggplot(north_spain_plots) +   geom_sf(     aes(color = province_name_original), alpha = 0.4,     show.legend = FALSE   ) +   scale_color_manual(values = hcl.colors(9, palette = \"Zissou 1\")) ifn_filter_list <- north_spain_plots |>   create_filter_list()  ## we can do all in one pipe: # ifn_filter_list <- show_plots_from( #    \"IFN\", folder = ifn_folder, provinces = north_spain_provinces, versions = \"ifn3\" # ) |> #   create_filter_list() ## We can parallelize the process with the future package. ## In this case we use 4 parallel processes library(future) plan(\"multisession\", workers = 4)  # get the data ifn_data <- ifn_to_tibble(   provinces = north_spain_provinces,   versions = \"ifn3\",   filter_list = ifn_filter_list,   folder = ifn_folder ) #> Start #> ℹ Processing 1 cicle #> Getting ready to retrieve 14935 plots for \"ifn3\" ifn_data |>   # clean plots without tree data   clean_empty(c(\"tree\")) |>   # convert inventory table to sf/spatial object   inventory_as_sf() |>   # unnest the tree data   unnest(\"tree\") |>   # calculate dbh by species in each plot   dplyr::group_by(id_unique_code, sp_name) |>   dplyr::summarise(     dbh = mean(dbh, na.rm = TRUE),     province_name_original = unique(province_name_original), n = n()   ) |>   dplyr::filter(!is.nan(dbh), !is.na(sp_name)) |>   # filter species with 100 or less entries (plots)   dplyr::group_by(sp_name) |>   dplyr::mutate(n = n()) |>   dplyr::filter(n > 500) |>   # let's plot   ggplot() +   geom_sf(aes(geometry = geometry, color = dbh), size = 2.2, alpha = 0.8) +   scale_color_gradientn(colors = hcl.colors(360, \"PinkYl\", rev = TRUE)) +   facet_wrap(~sp_name, ncol = 3) +   theme_minimal() #> `summarise()` has grouped output by 'id_unique_code'. You can override using #> the `.groups` argument."},{"path":"https://emf-creaf.github.io/forestables/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adriana Tovar. Author, contributor. Víctor Granda. Author, maintainer. Miquel de Cáceres. Contributor.","code":""},{"path":"https://emf-creaf.github.io/forestables/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tovar , Granda V (2024). forestables: Making Forest Inventory Data Tidy. R package version 0.0.5, https://emf-creaf.github.io/forestables/.","code":"@Manual{,   title = {forestables: Making Forest Inventory Data Tidy},   author = {Adriana Tovar and Víctor Granda},   year = {2024},   note = {R package version 0.0.5},   url = {https://emf-creaf.github.io/forestables/}, }"},{"path":"https://emf-creaf.github.io/forestables/index.html","id":"forestables","dir":"","previous_headings":"","what":"Making Forest Inventory Data Tidy","title":"Making Forest Inventory Data Tidy","text":"Read uniformize forest inventories data FIA (USA forest inventory), FFI (France forest inventory) IFN (Spain forest inventory).","code":""},{"path":"https://emf-creaf.github.io/forestables/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Making Forest Inventory Data Tidy","text":"can install development version forestables GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"emf-creaf/forestables\")"},{"path":"https://emf-creaf.github.io/forestables/index.html","id":"inventories-files","dir":"","previous_headings":"","what":"Inventories files","title":"Making Forest Inventory Data Tidy","text":"forestables offers download functions get inventory files official websites inventory: FIA FFI IFN2 IFN3 (accdb used) IFN4 sometimes fails due pages unavailable one reason another. recommend manually download unzip data desired folder. Download functions offered helpers programmatically approaches, users careful data can missing due connection errors, pages updates…","code":""},{"path":"https://emf-creaf.github.io/forestables/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Making Forest Inventory Data Tidy","text":"Download FFI (France forest inventory) extract plots Loire department 2015:","code":"library(forestables) #> Cargando paquete requerido: data.table #> Cargando paquete requerido: dtplyr library(dplyr) #>  #> Adjuntando el paquete: 'dplyr' #> The following objects are masked from 'package:data.table': #>  #>     between, first, last #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  ## Downloading all FFI data (if not already) ffi_path <- tempdir() download_inventory(\"FFI\", destination = ffi_path) #> ℹ Downloading FFI available data #> ℹ Unzipping downloaded data in '/tmp/Rtmp6r5gue' #> ✔ Done!  ## Get the plots ffi_filter_list <-   show_plots_from(\"FFI\", folder = ffi_path, departments = \"42\") |>   filter(CAMPAGNE == 2015) |>   create_filter_list()  loire_plots_2015 <- ffi_to_tibble(   \"42\",   years = 2015,   filter_list = ffi_filter_list,   folder = ffi_path ) |>   clean_empty(c(\"tree\", \"shrub\", \"regen\")) |>   inventory_as_sf() #> Start #> ℹ Processing 1 year #> Getting ready to retrieve 113 plots for 2015 #>  #> Adjuntando el paquete: 'purrr' #>  #>  #> The following object is masked from 'package:data.table': #>  #>     transpose  ## Explore the plots loire_plots_2015 #> Simple feature collection with 50 features and 15 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 3.70236 ymin: 45.27425 xmax: 4.739146 ymax: 46.20189 #> Geodetic CRS:  WGS 84 #> # A tibble: 50 × 16 #>      crs id_unique_code  year plot    coord_sys_orig aspect slope country dep   #>    <dbl> <chr>          <dbl> <chr>   <chr>           <dbl> <int> <chr>   <chr> #>  1  4326 FR_42_1000969   2015 1000969 LAMBERT         342      12 FR      42    #>  2  4326 FR_42_1002527   2015 1002527 LAMBERT         189      36 FR      42    #>  3  4326 FR_42_1002664   2015 1002664 LAMBERT          54      26 FR      42    #>  4  4326 FR_42_1003986   2015 1003986 LAMBERT          47.7    44 FR      42    #>  5  4326 FR_42_1005427   2015 1005427 LAMBERT         153       7 FR      42    #>  6  4326 FR_42_1005981   2015 1005981 LAMBERT         130.     25 FR      42    #>  7  4326 FR_42_1006115   2015 1006115 LAMBERT         270      40 FR      42    #>  8  4326 FR_42_1006386   2015 1006386 LAMBERT         324      22 FR      42    #>  9  4326 FR_42_1006791   2015 1006791 LAMBERT         266.     45 FR      42    #> 10  4326 FR_42_1006998   2015 1006998 LAMBERT          NA       0 FR      42    #> # ℹ 40 more rows #> # ℹ 7 more variables: dep_name <chr>, visite <int>, tree <list>, #> #   understory <list>, regen <list>, geometry <POINT [°]>, crs_orig <dbl>"},{"path":"https://emf-creaf.github.io/forestables/reference/clean_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleaning empty results — clean_empty","title":"Cleaning empty results — clean_empty","text":"Cleaning inventory results filter empty data","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/clean_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleaning empty results — clean_empty","text":"","code":"clean_empty(inventory_data, cols)"},{"path":"https://emf-creaf.github.io/forestables/reference/clean_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleaning empty results — clean_empty","text":"inventory_data Data inventory obtained ifn_to_tibble, fia_to_tibble ffi_to_tibble. cols vector column names clean empty results. Can one \"tree\", \"shrubs\", \"herbs\" \"regen\". one, plots data columns selected retained. \"shrubs\" \"herbs\" inside \"understory\" column, noted IFN inventory never \"herbs\" data, cleaning always return empty tibble.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/clean_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleaning empty results — clean_empty","text":"tibble inventory_data empty data removed columns selected.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/clean_empty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cleaning empty results — clean_empty","text":"functions remove plot rows empty data desired nested columns.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/clean_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleaning empty results — clean_empty","text":"","code":"# \\donttest{ if (FALSE) { # \\dontrun{ library(forestables)  # FFI ffi_to_tibble(   departments = c(\"01\"), years = c(2019),   filter_list = list(\"01\" = c(1404119)),   folder = \"path/to/ffi/data\" ) |>   clean_empty(c(\"tree\", \"regen\", \"shrub\", \"herbs\"))  # FIA fia_to_tibble(   years = 2019, states = c(\"OR\"),   filter_list = list(\"OR\" = list(\"59\" = c(76413))),   folder = \"path/to/fia/data\" ) |>   clean_empty(c(\"tree\", \"regen\", \"shrub\", \"herbs\"))  # IFN (never clean by \"herbs\", as is always empty) ifn_to_tibble(   provinces = c(\"24\"), versions = c(\"ifn3\"),   filter_list = list(\"24\" = c(\"24_0270_xx_A4_xx\")),   folder = \"path/to/ifn/data\" ) |>   clean_empty(c(\"tree\", \"regen\", \"shrub\")) } # } # }"},{"path":"https://emf-creaf.github.io/forestables/reference/create_filter_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a compatible plots filter list object — create_filter_list","title":"Create a compatible plots filter list object — create_filter_list","text":"Create compatible plots filter list result link{show_plots_from}","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/create_filter_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a compatible plots filter list object — create_filter_list","text":"","code":"create_filter_list(plots_info)"},{"path":"https://emf-creaf.github.io/forestables/reference/create_filter_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a compatible plots filter list object — create_filter_list","text":"plots_info Object resulted link{show_plots_from}, compatible one (.e. object plot filtering).","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/create_filter_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a compatible plots filter list object — create_filter_list","text":"list object compatible filter_list argument ffi_to_tibble, fia_to_tibble ifn_to_tibble","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/create_filter_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a compatible plots filter list object — create_filter_list","text":"function takes result link{show_plots_from}, compatible object creates filter list ready use ffi_to_tibble, fia_to_tibble ifn_to_tibble. Internal heuristics determine inventory data supplied.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/create_filter_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a compatible plots filter list object — create_filter_list","text":"","code":"# \\donttest{ if (FALSE) { # \\dontrun{ library(forestables)  # FIA show_plots_from(\"FIA\", folder = \".\", states = \"OR\") |>   create_filter_list() # FFI show_plots_from(\"FFI\", folder = \".\", departments = \"21\") |>   create_filter_list() # IFN show_plots_from(\"IFN\", folder = \".\", provinces = \"24\", version = \"ifn4\") |>   create_filter_list() } # } # }"},{"path":"https://emf-creaf.github.io/forestables/reference/download_inventory.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the especified inventory — download_inventory","title":"Download the especified inventory — download_inventory","text":"Download unzip inventory data files desired destination","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/download_inventory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the especified inventory — download_inventory","text":"","code":"download_inventory(   inventory = c(\"FIA\", \"FFI\", \"IFN\"),   destination = \".\",   states = NULL,   .verbose = TRUE )"},{"path":"https://emf-creaf.github.io/forestables/reference/download_inventory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the especified inventory — download_inventory","text":"inventory Character inventory abbreviation destination Path inventory destination folder. folder must exists. states Character vector indicating FIA states download. used FIA selected. .verbose Logical indicating progress messages shown.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/download_inventory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the especified inventory — download_inventory","text":"Invisible TRUE download unzip succesful, error otherwise.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/download_inventory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download the especified inventory — download_inventory","text":"function tries download available files especified inventory official repositories inventory. can fail can connection problems files missing temporary (usually happens version 4 IFN)","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/download_inventory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download the especified inventory — download_inventory","text":"","code":"# \\donttest{ if (FALSE) { # \\dontrun{ library(forestables) download_inventory(ffi, destination = tempdir()) } # } # }"},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_output_example.html","id":null,"dir":"Reference","previous_headings":"","what":"FFI example output — ffi_output_example","title":"FFI example output — ffi_output_example","text":"subset plots Loire department 2015 2018.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_output_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FFI example output — ffi_output_example","text":"","code":"ffi_output_example"},{"path":[]},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_output_example.html","id":"ffi-output-example","dir":"Reference","previous_headings":"","what":"ffi_output_example","title":"FFI example output — ffi_output_example","text":"nested dataframe FFI plots selected years Loire department","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_output_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"FFI example output — ffi_output_example","text":"FFI raw data obtained https://inventaire-forestier.ign.fr/","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw FFI data to tibble — ffi_to_tibble","title":"Raw FFI data to tibble — ffi_to_tibble","text":"Transform raw FFI plot data tidy data easier use","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw FFI data to tibble — ffi_to_tibble","text":"","code":"ffi_to_tibble(   departments,   years,   filter_list = NULL,   folder,   clean_empty = NULL,   as_sf = FALSE,   ...,   .parallel_options = furrr::furrr_options(scheduling = 1L, stdout = TRUE),   .verbose = TRUE )"},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw FFI data to tibble — ffi_to_tibble","text":"departments character vector code departments, .e. \"01\" c(\"01\", \"10\"). See examples details. years numeric vector years extract de data . filter_list list departments plots extract data . NULL plots department years extracted, can use big amount memory. See details. folder path folder containing FFI csv files, character. clean_empty Vector column names remove empty results. Can one \"tree\", \"shrub\", \"herbs\" \"regen\". one, plots data columns selected retained. Default NULL, cleaning done. as_sf Logical indicating data must returned spatial object. Default FALSE. ... used moment .parallel_options object class furrr_options. See furrr_options. .verbose Logical controlling progress messages shown.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raw FFI data to tibble — ffi_to_tibble","text":"nested tibble. tibble contains row per plot/year combination, plot metadata included, well columns containing tibbles tree, shrub, herbs information. See vignette(\"inventory_data_tibble\", package = \"forestables\")","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_to_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raw FFI data to tibble — ffi_to_tibble","text":"function take every year specified retrieve transform plot data departments plots provided. , csv files FFI must reside folder indicated folder argument.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_to_tibble.html","id":"filter-list","dir":"Reference","previous_headings":"","what":"Filter list","title":"Raw FFI data to tibble — ffi_to_tibble","text":"filter_list argument provided, ffi_to_tibble attempt process plots departments years provided. result sometimes hundred thousands plots extracted, processed returned, turn cause big use memory (specially running parallel processes) long times calculation. better provide list departments counties plots look narrow process. filter_list following structure: forestables package offers workflows create automatically, see vignette(\"selecting_plots\", package = \"forestables\") details.","code":"list(    \"01\" = 1404119,    \"10\" = 900863,    \"11\" = c(1436508, 1410492))    )"},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_to_tibble.html","id":"parallel","dir":"Reference","previous_headings":"","what":"Parallel","title":"Raw FFI data to tibble — ffi_to_tibble","text":"Processing plots within year can done parallel (forestables uses internally furrr package ). means , parallelization active, several processes launched retrieve plots data year. repeated years provided. .parallel_options controls finer details parallelization performed (see furrr_options). parallelization can occur without setting first plan. default, chosen plan sequential, parellelization done. Changing plan, .e. multisession allow ffi_to_tibble use parallelization retrieving data.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ffi_to_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raw FFI data to tibble — ffi_to_tibble","text":"","code":"# \\donttest{ if (FALSE) { # \\dontrun{ library(forestables) ffi_to_tibble(   departments = c(\"01\"), years = c(2019),   filter_list = list(\"01\" = c(1404119)),   folder = \"path/to/ffi/data\" ) } # } # }"},{"path":"https://emf-creaf.github.io/forestables/reference/fia_output_example.html","id":null,"dir":"Reference","previous_headings":"","what":"FIA example output — fia_output_example","title":"FIA example output — fia_output_example","text":"subset plots Alaska (AK) 2015 2018.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/fia_output_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FIA example output — fia_output_example","text":"","code":"fia_output_example"},{"path":[]},{"path":"https://emf-creaf.github.io/forestables/reference/fia_output_example.html","id":"fia-output-example","dir":"Reference","previous_headings":"","what":"fia_output_example","title":"FIA example output — fia_output_example","text":"nested dataframe FIA plots selected years Alaska","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/fia_output_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"FIA example output — fia_output_example","text":"FIA raw data obtained https://www.fs.usda.gov/research/programs/nfi#data--tools","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/fia_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw FIA data to tibble — fia_to_tibble","title":"Raw FIA data to tibble — fia_to_tibble","text":"Transform raw FIA plot data tidy data easier use","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/fia_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw FIA data to tibble — fia_to_tibble","text":"","code":"fia_to_tibble(   states,   years,   filter_list = NULL,   folder,   clean_empty = NULL,   as_sf = FALSE,   ...,   .parallel_options = furrr::furrr_options(scheduling = 1L, stdout = TRUE),   .verbose = TRUE )"},{"path":"https://emf-creaf.github.io/forestables/reference/fia_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw FIA data to tibble — fia_to_tibble","text":"states character vector two letters code states extract data . years numeric vector years extract de data . filter_list nested list states, counties plots extract data . left NULL plots state years extracted, can use big amount memory. See details. folder path folder containing FIA csv files, character. clean_empty Vector column names remove empty results. Can one \"tree\", \"shrub\", \"herbs\" \"regen\". one, plots data columns selected retained. Default NULL, cleaning done. as_sf Logical indicating data must returned spatial object. always can done later, data contains coordinates crs info. Default FALSE. ... used moment .parallel_options object class furrr_options. See furrr_options. .verbose Logical controlling progress messages shown.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/fia_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raw FIA data to tibble — fia_to_tibble","text":"nested tibble. tibble contains row per plot/year combination, plot metadata included, well columns containing tibbles tree, shrub, herbs soil information. See vignette(\"inventory_data_tibble\", package = \"forestables\")","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/fia_to_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raw FIA data to tibble — fia_to_tibble","text":"function take every year specified retrieve transform plot data states plots provided. , csv files FIA must reside folder indicated folder argument.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/fia_to_tibble.html","id":"filter-list","dir":"Reference","previous_headings":"","what":"Filter list","title":"Raw FIA data to tibble — fia_to_tibble","text":"filter_list argument provided, fia_to_tibble attempt process plots states years provided. result sometimes hundred thousands plots extracted, processed returned, turn cause big use memory (specially running parallel processes) long times calculation. better provide list states counties plots look narrow process. filter_list following structure: forestables package offers workflows create automatically, see vignette(\"selecting_plots\", package = \"forestables\") details.","code":"list(     \"MN\" = list(\"137\" = c(29396, 25064), \"71\" = c(20210)),     \"OR\" = list(\"59\" = c(76413)),     \"CA\" = list(\"105\" = c(70128, 83043))   )"},{"path":"https://emf-creaf.github.io/forestables/reference/fia_to_tibble.html","id":"parallel","dir":"Reference","previous_headings":"","what":"Parallel","title":"Raw FIA data to tibble — fia_to_tibble","text":"Processing plots within year can done parallel (forestables uses internally furrr package ). means , parallelization active, several processes launched retrieve plots data year. repeated years provided. .parallel_options controls finer details parallelization performed (see furrr_options). parallelization can occur without setting first plan. default, chosen plan sequential, parellization done. Changing plan, .e. multisession allow fia_to_tibble use parallelization retrieving data.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/fia_to_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raw FIA data to tibble — fia_to_tibble","text":"","code":"# \\donttest{ if (FALSE) { # \\dontrun{ library(forestables) fia_to_tibble(   years = 2014, states = c(\"OR\"),   filter_list = list(\"OR\" = list(\"59\" = c(76413))),   folder = \"path/to/fia/data\" ) } # } # }"},{"path":"https://emf-creaf.github.io/forestables/reference/forestables-package.html","id":null,"dir":"Reference","previous_headings":"","what":"forestables: Making Forest Inventory Data Tidy — forestables-package","title":"forestables: Making Forest Inventory Data Tidy — forestables-package","text":"`forestables` package converts raw forest inventory files Spanish Forest Inventory (IFN), French Forest Inventory (FFI) USA Forest Inventory (FIA) tidy tables used analyses modelling.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/forestables/reference/forestables-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"forestables: Making Forest Inventory Data Tidy — forestables-package","text":"Maintainer: Víctor Granda victorgrandagarcia@gmail.com (ORCID) Authors: Adriana Tovar [contributor] contributors: Miquel de Cáceres (ORCID) [contributor]","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_output_example.html","id":null,"dir":"Reference","previous_headings":"","what":"IFN example output — ifn_output_example","title":"IFN example output — ifn_output_example","text":"subset plots León province IFN2, IFN3 IFN4 versions.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_output_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IFN example output — ifn_output_example","text":"","code":"ifn_output_example"},{"path":[]},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_output_example.html","id":"ifn-output-example","dir":"Reference","previous_headings":"","what":"ifn_output_example","title":"IFN example output — ifn_output_example","text":"nested dataframe IFN plots selected versions León province","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_output_example.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"IFN example output — ifn_output_example","text":"IFN raw data obtained https://www.miteco.gob.es/es/biodiversidad/temas/inventarios-nacionales/inventario-forestal-nacional/cuarto_inventario.html","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw IFN data to tibble — ifn_to_tibble","title":"Raw IFN data to tibble — ifn_to_tibble","text":"Transform raw IFN plot data tidy data easier use","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw IFN data to tibble — ifn_to_tibble","text":"","code":"ifn_to_tibble(   provinces,   versions,   filter_list = NULL,   folder,   clean_empty = NULL,   as_sf = FALSE,   ...,   .parallel_options = furrr::furrr_options(scheduling = 1L, stdout = TRUE),   .verbose = TRUE )"},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw IFN data to tibble — ifn_to_tibble","text":"provinces character vector two-number codes provinces. versions character vector ifn versions. Valid versions \"ifn2\", \"ifn3\" \"ifn4\". filter_list list provinces plots extract data . folder path folder containing IFN db files, character. clean_empty Vector column names remove empty results. Can one \"tree\", \"shrub\", \"herbs\" \"regen\". one, plots data columns selected retained. Default NULL, cleaning done. as_sf Logical indicating data must returned spatial object. always can done later, data contains coordinates crs info. Default FALSE. ... used moment .parallel_options object class furrr_options. See furrr_options. .verbose Logical controlling progress messages shown.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raw IFN data to tibble — ifn_to_tibble","text":"nested tibble. tibble contains row per plot/year combination, plot metadata included, well columns containing tibbles tree, shrub, herbs soil information. See vignette(\"inventory_data_tibble\", package = \"forestables\")","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_to_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raw IFN data to tibble — ifn_to_tibble","text":"function take every year indicated retrieve transform plot data provinces, versions plots provided. , IFN db files must reside folder indicated folder argument.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_to_tibble.html","id":"filter-list","dir":"Reference","previous_headings":"","what":"Filter list","title":"Raw IFN data to tibble — ifn_to_tibble","text":"filter_list argument provided, ifn_to_tibble attempt process plots provinces ifn versions provided. result sometimes thousands plots extracted, processed returned, turn cause big use memory (specially running parallel processes) long times calculation. better provide list departments provinces plots look narrow process. filter_list following structure: forestables package offers workflows create automatically, see vignette(\"selecting_plots\", package = \"forestables\") details.","code":"list(    \"01\" = c(\"01_0644_NN_A1_A1\"),    \"08\" = c(\"08_1256_NN_A1_xx\", \"08_0056_xx_A4_xx\"),    \"24\" = c(\"24_0270_xx_A4_xx\")   )"},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_to_tibble.html","id":"parallel","dir":"Reference","previous_headings":"","what":"Parallel","title":"Raw IFN data to tibble — ifn_to_tibble","text":"Processing plots within IFN version can done parallel (forestables uses internally furrr package ). means , parallelization active, several processes launched retrieve plots data IFN version. repeated versions provided. .parallel_options controls finer details parallelization performed (see furrr_options). parallelization can occur without setting first plan. default, chosen plan sequential, parellization done. Changing plan, .e. multisession allow ifn_to_tibble use parallelization retrieving data.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/ifn_to_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raw IFN data to tibble — ifn_to_tibble","text":"","code":"# \\donttest{ if (FALSE) { # \\dontrun{ library(forestables) ifn_to_tibble(   provinces = c(\"24\"), versions = c(\"ifn3\"),   filter_list = list(\"24\" = c(\"24_0270_xx_A4_xx\")),   folder = \"path/to/ifn/data\" ) } # } # }"},{"path":"https://emf-creaf.github.io/forestables/reference/inventory_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert inventory data to sf based on coords and crs present — inventory_as_sf","title":"Convert inventory data to sf based on coords and crs present — inventory_as_sf","text":"Use coords vars crs convert sf","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/inventory_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert inventory data to sf based on coords and crs present — inventory_as_sf","text":"","code":"inventory_as_sf(inventory_data)"},{"path":"https://emf-creaf.github.io/forestables/reference/inventory_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert inventory data to sf based on coords and crs present — inventory_as_sf","text":"inventory_data Data inventory obtained ifn_to_tibble, fia_to_tibble ffi_to_tibble.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/inventory_as_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert inventory data to sf based on coords and crs present — inventory_as_sf","text":"sf object data inventory_data new column original crs traceability.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/inventory_as_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert inventory data to sf based on coords and crs present — inventory_as_sf","text":"","code":"# \\donttest{ if (FALSE) { # \\dontrun{ library(forestables)  # FFI ffi_to_tibble(   departments = c(\"01\"), years = c(2019),   filter_list = list(\"01\" = c(1404119)),   folder = \"path/to/ffi/data\" ) |>   inventory_as_sf()  # FIA fia_to_tibble(   years = 2019, states = c(\"OR\"),   filter_list = list(\"OR\" = list(\"59\" = c(76413))),   folder = \"path/to/fia/data\" ) |>   inventory_as_sf()  # IFN ifn_to_tibble(   provinces = c(\"24\"), versions = c(\"ifn3\"),   filter_list = list(\"24\" = c(\"24_0270_xx_A4_xx\")),   folder = \"path/to/ifn/data\" ) |>   inventory_as_sf() } # } # }"},{"path":"https://emf-creaf.github.io/forestables/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tidyr unnest","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/show_plots_from.html","id":null,"dir":"Reference","previous_headings":"","what":"Show plots for any inventory — show_plots_from","title":"Show plots for any inventory — show_plots_from","text":"Show plots minimal metadata inventory","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/show_plots_from.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show plots for any inventory — show_plots_from","text":"","code":"show_plots_from(inventory = c(\"FIA\", \"FFI\", \"IFN\"), folder = \".\", ...)"},{"path":"https://emf-creaf.github.io/forestables/reference/show_plots_from.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show plots for any inventory — show_plots_from","text":"inventory Character indicating inventory. Allowed values \"FIA\" USA forest inventory, \"FFI\" French Inventaire Forestier \"IFN\", Spanish Inventario Forestal Nacional. folder Character, path folder containing inventory files. ... arguments, depending inventory, see inventory sections.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/show_plots_from.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show plots for any inventory — show_plots_from","text":"sf spatial object row plot,. metadata provided varies depending inventory, usually includes state (FIA) / department (FFI)/ provincia (IFN) year/date/IFN version","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/show_plots_from.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show plots for any inventory — show_plots_from","text":"function show plots available inventory given administrative units. Take account can potentially show plots inventory, object returned can memory heavy. also return plots recorded, mean plots associated data (tree, understory...), just exist.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/show_plots_from.html","id":"fia","dir":"Reference","previous_headings":"","what":"FIA","title":"Show plots for any inventory — show_plots_from","text":"FIA needs extra argument, states, character vector two-letter code desired states.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/show_plots_from.html","id":"ffi","dir":"Reference","previous_headings":"","what":"FFI","title":"Show plots for any inventory — show_plots_from","text":"FFI needs extra argument, departments, character vector desired department codes.","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/show_plots_from.html","id":"ifn","dir":"Reference","previous_headings":"","what":"IFN","title":"Show plots for any inventory — show_plots_from","text":"IFN needs two extra arguments, provinces, character vector numeric codes provinces versions, character vector IFN versions look (\"ifn2\", \"ifn3\" /\"ifn4\").","code":""},{"path":"https://emf-creaf.github.io/forestables/reference/show_plots_from.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show plots for any inventory — show_plots_from","text":"","code":"# \\donttest{ if (FALSE) { # \\dontrun{ library(forestables)  # FIA show_plots_from(\"FIA\", folder = \"path/to/fia/data\", states = \"OR\") # FFI show_plots_from(\"FFI\", folder = \"path/to/ffi/data\", departments = \"21\") # IFN show_plots_from(\"IFN\", folder = \"path/to/ifn/data\", provinces = \"24\", versions = \"ifn4\") } # } # }"},{"path":"https://emf-creaf.github.io/forestables/news/index.html","id":"forestables-005","dir":"Changelog","previous_headings":"","what":"forestables 0.0.5","title":"forestables 0.0.5","text":"Updated vignettes Added logo","code":""},{"path":"https://emf-creaf.github.io/forestables/news/index.html","id":"forestables-004","dir":"Changelog","previous_headings":"","what":"forestables 0.0.4","title":"forestables 0.0.4","text":"Added metadata EMF Improved vignettes & README CI tests added","code":""},{"path":"https://emf-creaf.github.io/forestables/news/index.html","id":"forestables-003","dir":"Changelog","previous_headings":"","what":"forestables 0.0.3","title":"forestables 0.0.3","text":"Fixed bug IFN4 download MacOS","code":""},{"path":"https://emf-creaf.github.io/forestables/news/index.html","id":"forestables-002","dir":"Changelog","previous_headings":"","what":"forestables 0.0.2","title":"forestables 0.0.2","text":"Working version inventories (FIA, FFI IFN) pkgdown implemented Vignettes added","code":""},{"path":"https://emf-creaf.github.io/forestables/news/index.html","id":"forestables-001","dir":"Changelog","previous_headings":"","what":"forestables 0.0.1","title":"forestables 0.0.1","text":"Initial version","code":""}]
